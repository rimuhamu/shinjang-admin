// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Store{
  id String @id @default(cuid())
  name String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  billboards Billboard[]
  categories Category[]
  sizes Size[]
  colors Color[]
  products Product[]
  orders Order[]

}

model Billboard{
  id String @id @default(cuid())
  label String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String 

  categories Category[]

  store Store @relation(fields: [storeId], references: [id])
}

model Category{
  id String @id @default(cuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  billboardId String

  products Product[]

  store Store @relation(fields: [storeId], references: [id])
  billboard Billboard @relation(fields: [billboardId], references: [id])
}

model Size{
  id String @id @default(cuid())
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    
  storeId String

  products Product[]

  store Store @relation(fields: [storeId], references: [id])
}

model Color{
  id String @id @default(cuid())
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    
  storeId String

  products Product[]

  store Store @relation(fields: [storeId], references: [id])
}

model Product{
  id String @id @default(cuid())
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    
  storeId String
  categoryId String
  sizeId String
  colorId String

  images Image[]
  orderItems OrderItem[]

  store Store @relation(fields: [storeId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  size Size @relation(fields: [sizeId], references: [id])
  color Color @relation(fields: [colorId], references: [id])
}

model Image{
  id String @id @default(cuid())
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order{
  id String @id @default(cuid())
  isPaid Boolean @default(false)  
  phone String @default("")  
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  storeId String

  orderItems OrderItem[]

  store Store @relation(fields: [storeId], references: [id])
}

model OrderItem{
  id String @id @default(cuid())

  orderId String
  productId String

  order Order @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}